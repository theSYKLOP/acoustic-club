import{y as n,x as s}from"#entry";const u=n("orders",{state:()=>({orders:[],selectedOrder:null,loading:!1,error:null}),getters:{ordersByStatus:r=>e=>r.orders.filter(t=>t.status===e),pendingOrders:r=>r.orders.filter(e=>e.status==="EN_ATTENTE"),activeOrders:r=>r.orders.filter(e=>["EN_ATTENTE","EN_PREPARATION","PRET"].includes(e.status)),completedOrders:r=>r.orders.filter(e=>e.status==="PAYE"),totalRevenue:r=>r.orders.filter(e=>e.status==="PAYE").reduce((e,t)=>e+t.totalAmount,0),todayOrders:r=>{const e=new Date;return e.setHours(0,0,0,0),r.orders.filter(t=>new Date(t.createdAt)>=e)}},actions:{async fetchOrders(){this.loading=!0,this.error=null;try{const r=s();this.orders=await $fetch("/api/orders",{headers:{Authorization:`Bearer ${r.token}`}})}catch(r){this.error=r.data?.message||"Erreur lors du chargement des commandes"}finally{this.loading=!1}},async fetchOrder(r){this.loading=!0,this.error=null;try{const e=s();this.selectedOrder=await $fetch(`/api/orders/${r}`,{headers:{Authorization:`Bearer ${e.token}`}})}catch(e){this.error=e.data?.message||"Erreur lors du chargement de la commande"}finally{this.loading=!1}},async createOrder(r){this.loading=!0,this.error=null;try{const e=s(),t=await $fetch("/api/orders",{method:"POST",headers:{Authorization:`Bearer ${e.token}`},body:r});return this.orders.unshift(t),{success:!0,data:t}}catch(e){return this.error=e.data?.message||"Erreur lors de la création de la commande",{success:!1,error:this.error}}finally{this.loading=!1}},async updateOrder(r,e){this.loading=!0,this.error=null;try{const t=s(),a=await $fetch(`/api/orders/${r}`,{method:"PUT",headers:{Authorization:`Bearer ${t.token}`},body:e}),o=this.orders.findIndex(d=>d.id===r);return o!==-1&&(this.orders[o]=a),{success:!0,data:a}}catch(t){return this.error=t.data?.message||"Erreur lors de la mise à jour de la commande",{success:!1,error:this.error}}finally{this.loading=!1}},async updateOrderStatus(r,e){return this.updateOrder(r,{status:e})},async cancelOrder(r){return this.updateOrderStatus(r,"ANNULE")}}});export{u};
