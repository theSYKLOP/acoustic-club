#!/usr/bin/env pwsh
# üîß Script de Diagnostic Vercel - V√©rification Rapide

Write-Host "üîç Diagnostic Vercel Deployment" -ForegroundColor Cyan
Write-Host "=================================" -ForegroundColor Cyan

# 1. V√©rifier le d√©ploiement Vercel
Write-Host "`n1Ô∏è‚É£ V√©rification D√©ploiement Vercel..." -ForegroundColor Yellow
$vercelList = vercel list 2>&1
if ($LASTEXITCODE -eq 0) {
    Write-Host "‚úÖ Vercel CLI connect√©" -ForegroundColor Green
} else {
    Write-Host "‚ùå Erreur: vercel login requis" -ForegroundColor Red
    exit 1
}

# 2. V√©rifier vercel.json
Write-Host "`n2Ô∏è‚É£ V√©rification vercel.json..." -ForegroundColor Yellow
if (Test-Path "vercel.json") {
    $vercelJson = Get-Content "vercel.json" -Raw | ConvertFrom-Json
    Write-Host "‚úÖ vercel.json trouv√©" -ForegroundColor Green
    Write-Host "   Framework: $($vercelJson.framework)" -ForegroundColor Gray
    
    if ($vercelJson.nodeVersion) {
        Write-Host "‚ö†Ô∏è  ERREUR: nodeVersion d√©tect√© (doit √™tre supprim√©!)" -ForegroundColor Red
    }
} else {
    Write-Host "‚ùå vercel.json manquant!" -ForegroundColor Red
}

# 3. V√©rifier .nvmrc
Write-Host "`n3Ô∏è‚É£ V√©rification .nvmrc..." -ForegroundColor Yellow
if (Test-Path ".nvmrc") {
    $nodeVersion = Get-Content ".nvmrc"
    Write-Host "‚úÖ .nvmrc trouv√©: $nodeVersion" -ForegroundColor Green
} else {
    Write-Host "‚ö†Ô∏è  .nvmrc manquant (pas critique)" -ForegroundColor Yellow
}

# 4. V√©rifier .env
Write-Host "`n4Ô∏è‚É£ V√©rification Variables d'Environnement..." -ForegroundColor Yellow
if (Test-Path ".env") {
    $envVars = Get-Content ".env"
    $hasDatabase = $envVars -match "DATABASE_URL"
    $hasJwt = $envVars -match "JWT_SECRET"
    
    if ($hasDatabase) {
        Write-Host "‚úÖ DATABASE_URL d√©tect√©" -ForegroundColor Green
    } else {
        Write-Host "‚ùå DATABASE_URL manquante!" -ForegroundColor Red
    }
    
    if ($hasJwt) {
        Write-Host "‚úÖ JWT_SECRET d√©tect√©" -ForegroundColor Green
    } else {
        Write-Host "‚ùå JWT_SECRET manquante!" -ForegroundColor Red
    }
} else {
    Write-Host "‚ö†Ô∏è  .env manquant (doit √™tre en local)" -ForegroundColor Yellow
}

# 5. V√©rifier nuxt.config.ts
Write-Host "`n5Ô∏è‚É£ V√©rification nuxt.config.ts..." -ForegroundColor Yellow
$nuxtConfig = Get-Content "nuxt.config.ts"
if ($nuxtConfig -match "preset.*node") {
    Write-Host "‚úÖ Preset: node d√©tect√©" -ForegroundColor Green
} else {
    Write-Host "‚ùå Preset incorrect!" -ForegroundColor Red
}

# 6. V√©rifier les fichiers de build
Write-Host "`n6Ô∏è‚É£ V√©rification Build Local..." -ForegroundColor Yellow
if (Test-Path ".output/server/index.mjs") {
    Write-Host "‚úÖ Build local OK (.output/server/index.mjs existe)" -ForegroundColor Green
} else {
    Write-Host "‚ö†Ô∏è  Build local manquant - ex√©cutez: npm run build" -ForegroundColor Yellow
}

# 7. R√©sum√© des actions
Write-Host "`nüìã Actions Recommand√©es:" -ForegroundColor Cyan
Write-Host "=================================" -ForegroundColor Cyan

$actions = @(
    "1. Allez sur: https://vercel.com/mehdis-projects-aa063abc/acoustic-club/settings/environment-variables",
    "2. Ajoutez/V√©rifiez les variables:",
    "   - DATABASE_URL (depuis votre .env)",
    "   - JWT_SECRET (cl√© secr√®te)",
    "   - NODE_ENV = production",
    "3. Cliquez Redeploy dans Vercel",
    "4. Attendez 2-3 minutes",
    "5. Testez: vercel logs https://acoustic-club-xxxx.vercel.app"
)

$actions | ForEach-Object { Write-Host $_ -ForegroundColor Yellow }

Write-Host "`n‚ú® Fin du diagnostic" -ForegroundColor Cyan
